{:rename-macros {}, :renames {}, :externs {window {location {hostname {}, port {}, pathname {}, query {}, hash {}, search {}}}, Node {ELEMENT_NODE {}}, document {}, Error {}, console {error {}}}, :use-macros {}, :excludes #{}, :name accountant.core, :imports {Event goog.history.Event, Html5History goog.history.Html5History, Uri goog.Uri}, :requires {str clojure.string, clojure.string clojure.string, events goog.events, goog.events goog.events, EventType goog.history.EventType, goog.history.EventType goog.history.EventType, Event goog.history.Event, Html5History goog.history.Html5History, Uri goog.Uri}, :cljs.spec/speced-vars [], :uses nil, :defs {nav-handler {:name accountant.core/nav-handler, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :line 103, :column 1, :end-line 103, :end-column 21, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 103, :column 10, :end-line 103, :end-column 21}, :tag clj-nil}, transformer-create-url {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 10, :column 8, :end-line 10, :end-column 30, :private true, :arglists (quote ([token path-prefix location]))}, :private true, :name accountant.core/transformer-create-url, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 30, :method-params ([token path-prefix location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 3, :fn-var true, :arglists (quote ([token path-prefix location]))}, uri->fragment {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 58, :column 8, :end-line 58, :end-column 21, :private true, :arglists (quote ([uri]))}, :private true, :name accountant.core/uri->fragment, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 21, :method-params ([uri]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([uri]))}, map->params {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 123, :column 7, :end-line 123, :end-column 18, :arglists (quote ([query]))}, :name accountant.core/map->params, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 18, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query]))}, path-exists? {:name accountant.core/path-exists?, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :line 104, :column 1, :end-line 104, :end-column 22, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 104, :column 10, :end-line 104, :end-column 22}, :tag clj-nil}, transformer-retrieve-token {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 14, :column 8, :end-line 14, :end-column 34, :private true, :arglists (quote ([path-prefix location]))}, :private true, :name accountant.core/transformer-retrieve-token, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 34, :method-params ([path-prefix location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path-prefix location]))}, get-href-attribute {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 32, :column 8, :end-line 32, :end-column 26, :private true, :arglists (quote ([node])), :doc "Given a DOM node, if it is an element node, return its href attribute.\n  Otherwise, return nil."}, :private true, :name accountant.core/get-href-attribute, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 26, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Given a DOM node, if it is an element node, return its href attribute.\n  Otherwise, return nil."}, uri->query {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 53, :column 8, :end-line 53, :end-column 18, :private true, :arglists (quote ([uri]))}, :private true, :name accountant.core/uri->query, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 18, :method-params ([uri]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([uri]))}, history {:name accountant.core/history, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :line 18, :column 1, :end-line 18, :end-column 17, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 18, :column 10, :end-line 18, :end-column 17}, :tag goog/history.Html5History}, navigate! {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 129, :column 7, :end-line 129, :end-column 16, :arglists (quote ([route] [route query])), :doc "add a browser history entry. updates window/location", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([route] [route query]), :arglists ([route] [route query]), :arglists-meta (nil nil)}}, :name accountant.core/navigate!, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([route] [route query]), :arglists ([route] [route query]), :arglists-meta (nil nil)}, :method-params ([route] [route query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists ([route] [route query]), :doc "add a browser history entry. updates window/location"}, prevent-reload-on-known-path {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 63, :column 8, :end-line 63, :end-column 36, :private true, :arglists (quote ([history path-exists?])), :doc "Create a click handler that blocks page reloads for known routes"}, :private true, :name accountant.core/prevent-reload-on-known-path, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 36, :method-params ([history path-exists?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([history path-exists?])), :doc "Create a click handler that blocks page reloads for known routes"}, dispatch-on-navigate {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 23, :column 8, :end-line 23, :end-column 28, :private true, :arglists (quote ([history nav-handler]))}, :private true, :name accountant.core/dispatch-on-navigate, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 28, :method-params ([history nav-handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([history nav-handler]))}, dispatch-current! {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 148, :column 7, :end-line 148, :end-column 24, :arglists (quote ([]))}, :name accountant.core/dispatch-current!, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, configure-navigation! {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 106, :column 7, :end-line 106, :end-column 28, :arglists (quote ([{:keys [nav-handler path-exists?]}])), :doc "Create and configure HTML5 history navigation.\n\n  nav-handler: a fn of one argument, a path. Called when we've decided\n  to navigate to another page. You'll want to make your app draw the\n  new page here.\n\n  path-exists?: a fn of one argument, a path. Return truthy if this path is handled by the SPA"}, :name accountant.core/configure-navigation!, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 28, :method-params ([p__37813]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [nav-handler path-exists?]}])), :doc "Create and configure HTML5 history navigation.\n\n  nav-handler: a fn of one argument, a path. Called when we've decided\n  to navigate to another page. You'll want to make your app draw the\n  new page here.\n\n  path-exists?: a fn of one argument, a path. Return truthy if this path is handled by the SPA"}, find-href-node {:protocol-inline nil, :meta {:file "/home/didier/clojupyter/website/target/cljsbuild/public/js/out/accountant/core.cljs", :line 39, :column 8, :end-line 39, :end-column 22, :private true, :arglists (quote ([e])), :doc "Given a DOM element that may or may not be a link, traverse up the DOM tree\n  to see if any of its parents are links. If so, return the href content, if \n  it does not have an explicit `data-trigger` attribute to signify a non-navigational\n  link element."}, :private true, :name accountant.core/find-href-node, :variadic false, :file "target/cljsbuild/public/js/out/accountant/core.cljs", :end-column 22, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :doc "Given a DOM element that may or may not be a link, traverse up the DOM tree\n  to see if any of its parents are links. If so, return the href content, if \n  it does not have an explicit `data-trigger` attribute to signify a non-navigational\n  link element."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:path-exists? :nav-handler}, :order [:nav-handler :path-exists?]}, :doc "The only namespace in this library."}